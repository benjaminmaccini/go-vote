// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: voter.sql

package db

import (
	"context"
	"database/sql"
)

const createVoter = `-- name: CreateVoter :one
INSERT INTO voter (id, zip)
VALUES (?, ?) RETURNING id, zip
`

type CreateVoterParams struct {
	ID  string         `json:"id"`
	Zip sql.NullString `json:"zip"`
}

func (q *Queries) CreateVoter(ctx context.Context, arg CreateVoterParams) (Voter, error) {
	row := q.db.QueryRowContext(ctx, createVoter, arg.ID, arg.Zip)
	var i Voter
	err := row.Scan(&i.ID, &i.Zip)
	return i, err
}

const deleteVoter = `-- name: DeleteVoter :exec
DELETE FROM voter
WHERE id = ?
`

func (q *Queries) DeleteVoter(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVoter, id)
	return err
}

const listVoters = `-- name: ListVoters :many
SELECT id, zip FROM voter
ORDER BY id
LIMIT ? OFFSET ?
`

type ListVotersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListVoters(ctx context.Context, arg ListVotersParams) ([]Voter, error) {
	rows, err := q.db.QueryContext(ctx, listVoters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Voter
	for rows.Next() {
		var i Voter
		if err := rows.Scan(&i.ID, &i.Zip); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVoter = `-- name: UpdateVoter :one
UPDATE voter
SET zip = ?
WHERE id = ?
RETURNING id, zip
`

type UpdateVoterParams struct {
	Zip sql.NullString `json:"zip"`
	ID  string         `json:"id"`
}

func (q *Queries) UpdateVoter(ctx context.Context, arg UpdateVoterParams) (Voter, error) {
	row := q.db.QueryRowContext(ctx, updateVoter, arg.Zip, arg.ID)
	var i Voter
	err := row.Scan(&i.ID, &i.Zip)
	return i, err
}
