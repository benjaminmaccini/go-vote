// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: election.sql

package db

import (
	"context"
)

const createElection = `-- name: CreateElection :one
INSERT INTO election (id, name)
VALUES (?, ?) RETURNING id, name
`

type CreateElectionParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateElection(ctx context.Context, arg CreateElectionParams) (Election, error) {
	row := q.db.QueryRowContext(ctx, createElection, arg.ID, arg.Name)
	var i Election
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteElection = `-- name: DeleteElection :exec
DELETE FROM election
WHERE id = ?
`

func (q *Queries) DeleteElection(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteElection, id)
	return err
}

const listElections = `-- name: ListElections :many
SELECT id, name FROM election
ORDER BY name
LIMIT ? OFFSET ?
`

type ListElectionsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListElections(ctx context.Context, arg ListElectionsParams) ([]Election, error) {
	rows, err := q.db.QueryContext(ctx, listElections, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Election
	for rows.Next() {
		var i Election
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateElection = `-- name: UpdateElection :one
UPDATE election
SET name = ?
WHERE id = ?
RETURNING id, name
`

type UpdateElectionParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateElection(ctx context.Context, arg UpdateElectionParams) (Election, error) {
	row := q.db.QueryRowContext(ctx, updateElection, arg.Name, arg.ID)
	var i Election
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
