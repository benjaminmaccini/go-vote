// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: election_result.sql

package db

import (
	"context"
	"database/sql"
)

const createElectionResult = `-- name: CreateElectionResult :one
INSERT INTO election_result (id, election_id, candidate_id, total_votes, vote_percentage, rank)
VALUES (?, ?, ?, ?, ?, ?) RETURNING id, election_id, candidate_id, total_votes, vote_percentage, rank
`

type CreateElectionResultParams struct {
	ID             string          `json:"id"`
	ElectionID     sql.NullString  `json:"election_id"`
	CandidateID    sql.NullString  `json:"candidate_id"`
	TotalVotes     sql.NullInt64   `json:"total_votes"`
	VotePercentage sql.NullFloat64 `json:"vote_percentage"`
	Rank           sql.NullInt64   `json:"rank"`
}

func (q *Queries) CreateElectionResult(ctx context.Context, arg CreateElectionResultParams) (ElectionResult, error) {
	row := q.db.QueryRowContext(ctx, createElectionResult,
		arg.ID,
		arg.ElectionID,
		arg.CandidateID,
		arg.TotalVotes,
		arg.VotePercentage,
		arg.Rank,
	)
	var i ElectionResult
	err := row.Scan(
		&i.ID,
		&i.ElectionID,
		&i.CandidateID,
		&i.TotalVotes,
		&i.VotePercentage,
		&i.Rank,
	)
	return i, err
}

const deleteElectionResult = `-- name: DeleteElectionResult :exec
DELETE FROM election_result
WHERE id = ?
`

func (q *Queries) DeleteElectionResult(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteElectionResult, id)
	return err
}

const listElectionResults = `-- name: ListElectionResults :many
SELECT id, election_id, candidate_id, total_votes, vote_percentage, rank FROM election_result
ORDER BY rank ASC
LIMIT ? OFFSET ?
`

type ListElectionResultsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListElectionResults(ctx context.Context, arg ListElectionResultsParams) ([]ElectionResult, error) {
	rows, err := q.db.QueryContext(ctx, listElectionResults, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ElectionResult
	for rows.Next() {
		var i ElectionResult
		if err := rows.Scan(
			&i.ID,
			&i.ElectionID,
			&i.CandidateID,
			&i.TotalVotes,
			&i.VotePercentage,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateElectionResult = `-- name: UpdateElectionResult :one
UPDATE election_result
SET election_id = ?, candidate_id = ?, total_votes = ?, vote_percentage = ?, rank = ?
WHERE id = ?
RETURNING id, election_id, candidate_id, total_votes, vote_percentage, rank
`

type UpdateElectionResultParams struct {
	ElectionID     sql.NullString  `json:"election_id"`
	CandidateID    sql.NullString  `json:"candidate_id"`
	TotalVotes     sql.NullInt64   `json:"total_votes"`
	VotePercentage sql.NullFloat64 `json:"vote_percentage"`
	Rank           sql.NullInt64   `json:"rank"`
	ID             string          `json:"id"`
}

func (q *Queries) UpdateElectionResult(ctx context.Context, arg UpdateElectionResultParams) (ElectionResult, error) {
	row := q.db.QueryRowContext(ctx, updateElectionResult,
		arg.ElectionID,
		arg.CandidateID,
		arg.TotalVotes,
		arg.VotePercentage,
		arg.Rank,
		arg.ID,
	)
	var i ElectionResult
	err := row.Scan(
		&i.ID,
		&i.ElectionID,
		&i.CandidateID,
		&i.TotalVotes,
		&i.VotePercentage,
		&i.Rank,
	)
	return i, err
}
